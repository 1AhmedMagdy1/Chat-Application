/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package test;


import java.awt.Adjustable;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import raven.scroll.win11.ScrollBarWin11UI;
import javax.imageio.ImageIO;
/**
 *
 * @author Mohamed
 */
public class client extends javax.swing.JFrame {

    /**
     * Creates new form client
     */
  public static Socket s;
  public static  DataInputStream din;
  public static DataOutputStream dout;
  public static String status;
  public static String msg;
  public static FileInputStream fin;
  public static String username;
    public  client() {
        initComponents();
    
    }
public static void con(){
     try {
            s = new Socket(InetAddress.getLocalHost(),5000);
            din = new DataInputStream(s.getInputStream());
            dout = new DataOutputStream(s.getOutputStream());
        } catch (IOException ex) {
            Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUp = new javax.swing.JPopupMenu();
        sendPhoto = new javax.swing.JMenuItem();
        sendFile = new javax.swing.JMenuItem();
        spChat = new javax.swing.JScrollPane();
        panelChat = new javax.swing.JDesktopPane(){
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        txt = new javax.swing.JTextField();
        cmdsend = new javax.swing.JButton();
        cmdMore = new javax.swing.JButton();
        name = new javax.swing.JLabel();

        sendPhoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/photo.png"))); // NOI18N
        sendPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPhotoActionPerformed(evt);
            }
        });
        popUp.add(sendPhoto);

        sendFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/file.png"))); // NOI18N
        sendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileActionPerformed(evt);
            }
        });
        popUp.add(sendFile);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        spChat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        spChat.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelChat.setBackground(new java.awt.Color(255, 255, 255));
        panelChat.setLayout(new javax.swing.BoxLayout(panelChat, javax.swing.BoxLayout.Y_AXIS));
        spChat.setViewportView(panelChat);

        txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtActionPerformed(evt);
            }
        });

        cmdsend.setText("send");
        cmdsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsendActionPerformed(evt);
            }
        });

        cmdMore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/more.png"))); // NOI18N
        cmdMore.setBorder(null);
        cmdMore.setContentAreaFilled(false);
        cmdMore.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmdMore.setFocusable(false);
        cmdMore.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/more_click.png"))); // NOI18N
        cmdMore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdMoreActionPerformed(evt);
            }
        });

        name.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        name.setText("client");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(cmdsend, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(cmdMore)
                .addContainerGap(91, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(name)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(spChat, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(spChat, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cmdsend, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(txt)
                    .addComponent(cmdMore, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtActionPerformed

    private void cmdsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsendActionPerformed

      try {
          dout.writeUTF("message");
          dout.writeUTF(username);
          dout.writeUTF(txt.getText());
          
          getMessage(txt.getText());
        
 
    
      } catch (IOException ex) {
          Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_cmdsendActionPerformed

    private void cmdMoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdMoreActionPerformed
        popUp.show(cmdMore, -10, -80);
    }//GEN-LAST:event_cmdMoreActionPerformed

    private void sendPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPhotoActionPerformed
popUp.setVisible(false);
        setImage();
    }//GEN-LAST:event_sendPhotoActionPerformed

    private void sendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileActionPerformed
        try {
            // TODO add your handling code here:
            popUp.setVisible(false);
            setFile();
        } catch (Exception ex) {
            Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendFileActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
 
  start();
    }//GEN-LAST:event_formWindowOpened

    private static void getMessage( String ms){
        if (!txt.getText().equals("")) {                 
            
                Send_Box_New box = new Send_Box_New();
                box.setMessage(ms,username);
                panelChat.add(box);
                txt.setText("");
                txt.grabFocus();
                refresh(panelChat);
                scrollToBottom(spChat);
             
    }
    }
    
    private static void refresh(Component obj) {
        obj.revalidate();
        obj.repaint();
    }
  private static void scrollToBottom(JScrollPane scrollPane) {
        JScrollBar verticalBar = scrollPane.getVerticalScrollBar();
        AdjustmentListener downScroller = new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                Adjustable adjustable = e.getAdjustable();
                adjustable.setValue(adjustable.getMaximum());
                verticalBar.removeAdjustmentListener(this);
            }
        };
        verticalBar.addAdjustmentListener(downScroller);
    }
  public void recievetxt(String msg){
     Send_Box_New box = new Send_Box_New();
                box.setMessage(msg);
                panelChat.add(box);
                txt.setText("");
                txt.grabFocus();
                refresh(panelChat);
                scrollToBottom(spChat);
             
  }
  private void setImage() {
        JFileChooser ch = new JFileChooser();
        FileChooser preview = new FileChooser();
        ch.setAccessory(preview);
        ch.addPropertyChangeListener(preview);
        ch.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                String name = file.getName();
                return file.isDirectory() || name.endsWith(".png") || name.endsWith(".PNG") || name.endsWith("jpg") || name.endsWith("JPG");
            }

            @Override
            public String getDescription() {
                return "png,jpg";
            }
        });
        int c = ch.showOpenDialog(this);
        if (c == JFileChooser.APPROVE_OPTION) {
            ImageIcon image = new ImageIcon(ch.getSelectedFile().getAbsolutePath());
              String imageNmame=ch.getSelectedFile().getName();
            try {
                dout.writeUTF("image");
                dout.writeUTF(username);
                int size=(int)ch.getSelectedFile().length(); //size of image
                byte content[]=new byte[size];
                
                fin=new FileInputStream(ch.getSelectedFile());
                fin.read(content);
                
                dout.writeInt(size);
                dout.write(content,0,size);
                dout.writeUTF(imageNmame);
            } catch (IOException ex) {
                Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
               getPhoto(image);
            } catch (Exception e){
                System.out.println("Error : Can't send photo");
            }
        }
    }
           private void getPhoto( ImageIcon image) {
               Send_Photo_Box_New box = new Send_Photo_Box_New();
                box.setPhoto(image);
                panelChat.add(box);
           
               refresh(panelChat);
        scrollToBottom(spChat);
           }
    private void setFile() throws Exception {
        JFileChooser ch = new JFileChooser();
        FileChooser preview = new FileChooser();
        ch.setAccessory(preview);
        ch.addPropertyChangeListener(preview);
        int c = ch.showOpenDialog(this);
        if (c == JFileChooser.APPROVE_OPTION){
           // Method.sendFile(ch.getSelectedFile());
           try {
                dout.writeUTF("file");
                 dout.writeUTF(username);
                int size=(int)ch.getSelectedFile().length(); //size of image
                byte content[]=new byte[size];
                fin=new FileInputStream(ch.getSelectedFile());
                fin.read(content);
                dout.writeInt(size);
                dout.writeUTF(ch.getSelectedFile().getName());
                
               
                dout.write(content,0,size);
            } catch (IOException ex) {
                Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
            }
           getFile(ch.getSelectedFile().getName());
        }
    }
     private void getFile(String ms) {
         Send_File_New box = new Send_File_New();
                box.set( ms);
                panelChat.add(box);
                refresh(panelChat);
        scrollToBottom(spChat);
     }
     private void getFile(String ms,byte[]arr) {
         Send_File_New box = new Send_File_New();
         box.set_content(arr);
         box.set(ms);
                panelChat.add(box);
                refresh(panelChat);
        scrollToBottom(spChat);
     }
      private Thread th;
       private void start() {
      th=new Thread(new Runnable(){
          @Override
          public void run() {
          while(true){
          synchronized(din){
              try {
                  status= din.readUTF();
                  if(status.equals("message")){
                msg=din.readUTF();
                 recievetxt(msg);
                  }
                  else if(status.equals("image")){
               int size=din.readInt();
               byte content[]=new byte[size];
               din.readFully(content, 0, size);
                ByteArrayInputStream bis = new ByteArrayInputStream(content);
               Image image=ImageIO.read(bis);
               ImageIcon icon = new ImageIcon(image);
                      getPhoto(icon);
                  }
                  else if(status.equals("file")){
                  int size=din.readInt();
                  String name=din.readUTF();
               byte content[]=new byte[size];
               din.readFully(content, 0, size);
                      getFile(name, content);
                  }
              } catch (IOException ex) {
                  Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
              }
          }     
      
         }
          
          }
          
      });
      th.start();
       }     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        username=args[0];
        System.out.println(username);
        con(); 
        UIDefaults ui = UIManager.getDefaults();
        ui.put("ScrollBarUI", ScrollBarWin11UI.class.getCanonicalName());
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new client().setVisible(true);
            }
        });
         
         
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton cmdMore;
    private static javax.swing.JButton cmdsend;
    private javax.swing.JLabel name;
    private static javax.swing.JDesktopPane panelChat;
    private javax.swing.JPopupMenu popUp;
    private javax.swing.JMenuItem sendFile;
    private javax.swing.JMenuItem sendPhoto;
    private static javax.swing.JScrollPane spChat;
    private static javax.swing.JTextField txt;
    // End of variables declaration//GEN-END:variables
}
